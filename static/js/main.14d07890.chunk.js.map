{"version":3,"sources":["fonts/DisposableDroidBB_bld.otf","serviceWorker.js","App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","unregister","navigator","serviceWorker","ready","then","registration","ReactGA","initialize","pageview","App","useState","moreInfo","setMoreInfo","body","keys","addEventListener","e","keyCode","preventDefault","className","href","onClick","event","category","action","url","width","height","id","display","scrolling","allowFullScreen","position","ReactDOM","render","document","getElementById"],"mappings":"uLAAAA,EAAOC,QAAU,IAA0B,mD,6FCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA8GC,SAASC,IACV,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaL,gB,kBC5HfM,IAAQC,WAAW,kBACnBD,IAAQE,SAAS,aAKrB,IAsHeC,EAtHH,WAAO,IAAD,EACgBC,oBAAS,GADzB,mBACTC,EADS,KACCC,EADD,KAGhBV,IAEA,IAiCIW,EAnBAC,EAAO,GA2FX,OAzFAlB,OAAOmB,iBAAiB,WACtB,SAASC,GAEL,OADAF,EAAKE,EAAEC,UAAW,EACXD,EAAEC,SACL,KAAK,GAAI,KAAK,GAAI,KAAK,GAAK,KAAK,GACjC,KAAK,GAAID,EAAEE,qBAIrB,GAEAtB,OAAOmB,iBAAiB,WACpB,SAASC,GACLF,EAAKE,EAAEC,UAAW,KAE1B,GAkDEJ,EA/CGF,EAgDF,6BACC,yBAAKQ,UAAU,WACb,0FACA,2BAAG,uBAAGC,KAAK,4BAAR,uCACH,2BAAG,uBAAGA,KAAK,uCAAR,uCACH,kFAEF,yBAAKD,UAAU,cACb,yBACEA,UAAU,UACVE,QAAS,WApFff,IAAQgB,MAAM,CACZC,SAAU,SACVC,OAAQ,qBAqFAZ,GAAY,KAIhB,sCA/DJ,6BACE,yBAAKO,UAAU,gBACb,yBAAKA,UAAU,sBACb,kBAAC,IAAD,CAAQM,IAAI,8CACZC,MAAM,OACNC,OAAO,OACPC,GAAG,OACHT,UAAU,cACVU,QAAQ,UACRC,UAAU,QACVC,gBAAgB,OAChBC,SAAS,eAIb,yBAAKb,UAAU,cAEb,yBAAKA,UAAU,UAAUE,QArDX,WACpBf,IAAQgB,MAAM,CACZC,SAAU,SACVC,OAAQ,6CAmDJ,uBACEL,UAAU,cACVC,KAAK,iIAEL,mDAIJ,yBAAKD,UAAU,cACb,wBAAIA,UAAU,eACZ,4BACE,uBAAGC,KAAK,qFAAR,mBAIF,4BACE,uBAAGA,KAAK,oCAAR,sBAMN,yBAAKD,UAAU,mBACb,uBAAGE,QAAS,kBAAIT,GAAY,IAAMO,UAAU,YAA5C,OA6BN,yBAAKA,UAAU,OACZN,I,MCtHPoB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SAKjDlC,M","file":"static/js/main.14d07890.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/DisposableDroidBB_bld.141dbd81.otf\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useState } from 'react';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\nimport Iframe from 'react-iframe';\nimport ReactGA from 'react-ga';\n \nfunction initializeReactGA() {\n    ReactGA.initialize('UA-149402647-1');\n    ReactGA.pageview('/homepage');\n}\n\ninitializeReactGA();\n\nconst App = () => {\n  const [moreInfo, setMoreInfo] = useState(false);\n\n  serviceWorker.unregister();\n  \n  const petitionClick = () => {\n    ReactGA.event({\n      category: 'Button',\n      action: 'Sign Petition button clicked (on page)'\n    });\n  }\n\n  const aboutClick = () => {\n    ReactGA.event({\n      category: 'Button',\n      action: 'About \"?\" button'\n    })\n  }\n\n  var keys = {};\n\n  window.addEventListener(\"keydown\",\n    function(e){\n        keys[e.keyCode] = true;\n        switch(e.keyCode){\n            case 37: case 39: case 38:  case 40: // Arrow keys\n            case 32: e.preventDefault(); break; // Space\n            default: break; // do not block other keys\n        }\n    },\n  false);\n\n  window.addEventListener('keydown',\n      function(e){\n          keys[e.keyCode] = false;\n      },\n  false);\n\n  let body;\n  if (!moreInfo) {\n    body = \n      <div>\n        <div className=\"aspect-ratio\">\n          <div className=\"aspect-ratio-inner\">\n            <Iframe url=\"https://gnuck.github.io/DestroyDeniersGame/\"\n            width=\"100%\"\n            height=\"100%\"\n            id=\"myId\"\n            className=\"myClassname\"\n            display=\"initial\"\n            scrolling=\"false\"\n            allowFullScreen=\"true\"\n            position=\"relative\"\n          />\n          </div>\n        </div>\n        <div className=\"btnWrapper\">\n\n          <div className=\"backBtn\" onClick={petitionClick}>\n          <a \n            className=\"petitionBtn\" \n            href=\"https://act.nrdc.org/letter/climate-action-190528?source=WBSCLIPET&_ga=2.268940785.1658644004.1568915059-710825981.1568915059\"\n          >\n            <p>SIGN THE PETITION</p>\n          </a>\n          </div>\n        </div>\n        <div className=\"btnWrapper\">\n          <ul className=\"linkWrapper\">\n            <li>\n              <a href=\"https://www.nrdc.org/?_ga=2.260557133.1502811972.1569007614-2068348596.1569007614\">\n                Climate Change\n              </a>\n            </li>\n            <li>\n              <a href=\"https://globalclimatestrike.net/\">\n                Strikes Near Me\n              </a>\n            </li>\n          </ul>\n        </div>\n        <div className=\"infoLinkWrapper\">\n          <p onClick={()=>setMoreInfo(true)}className=\"infoLink\">?</p>\n        </div>\n      </div>\n  } else {\n    body =     \n    (<div>\n      <div className=\"credits\">\n        <p>Nick Milner...................Game Developer/Level Designer</p>\n        <p><a href=\"https://chloekonnor.com/\">Chloe Konnor................Writer</a></p>\n        <p><a href=\"https://tanyakarpitskiy.format.com/\">Tanya Karpitskiy..........Designer</a></p>\n        <p>Daniel Thies.................Character Illustrator</p>\n      </div>\n      <div className=\"btnWrapper\">\n        <div \n          className=\"backBtn\" \n          onClick={()=>\n            {\n              aboutClick();\n              setMoreInfo(false);\n            }\n          }\n        >\n          <p>BACK</p>\n        </div>\n      </div>\n    </div>)\n  }\n\n  return (\n    <div className=\"App\">\n      {body}\n    </div>\n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './fonts/DisposableDroidBB_bld.otf'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}